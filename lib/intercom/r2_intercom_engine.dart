import 'package:flutter/material.dart';
import 'dart:async';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:permission_handler/permission_handler.dart';

// application id provide by Shengwang
const appId = "e861b361b8754affbe1cd3772b20d040";
// token provided by Shengwang, which generated by channel name fed
const token = "007eJxTYFjuwJj7NNdhctjy+XuqDvl+mDbbydLVVdb72+P5eal97ycpMKRamBkmGQOxhbmpSWJaWlKqYXKKsbm5UZKRQYqBicH164fSGgIZGQKKSxgYoRDE52Aoyk/OLspPTGFgAAAVKyJL";
// channel name
const channel = "rockroad";

typedef IntercomCallback = void Function(int value);

class R2IntercomEngine {
  final IntercomCallback? onLocalJoined;
  final IntercomCallback? onMemberJoined;
  final IntercomCallback? onMemberLeft;

  R2IntercomEngine({
    this.onLocalJoined,
    this.onMemberJoined,
    this.onMemberLeft,
  });

  late RtcEngine _engine;

  /*
   * initialize the agrora rtc engine developed by Shengwang
   */
  Future<void> initAgora() async {
    // get the microphone permission
    await [Permission.microphone].request();

    // create and instance of rtc engine
    _engine = createAgoraRtcEngine();

    // initialize RtcEngine for live broadcasting
    await _engine.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileLiveBroadcasting,
    ));

    // register an event handler to handle the group action
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // the local user has joined group
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint("local user ${connection.localUid} joined");
          onLocalJoined?.call(connection.localUid!);
        },
        // the remote member has joined group
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("$runtimeType: remote user $remoteUid joined");
          onMemberJoined?.call(remoteUid);
        },
        // the remote member has left group
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          debugPrint("$runtimeType: remote user $remoteUid left channel");
          onMemberLeft?.call(remoteUid);
        },
      ),
    );

    // join a channel
    await _engine.joinChannel(
      token: token,
      channelId: channel,
      options: const ChannelMediaOptions(
          autoSubscribeAudio: true,
          publishMicrophoneTrack: true,
          clientRoleType: ClientRoleType.clientRoleBroadcaster
      ),
      uid: 0,
    );
  }

  /*
   *
   */
  Future<void> pauseSpeak(bool mute) async {
    _engine.muteLocalAudioStream(mute);
  }

  /*
   * stop intercom
   */
  Future<void> stopIntercom() async {
    debugPrint('$runtimeType: stop intercom');
    await _engine.leaveChannel();
    await _engine.release();
  }
}